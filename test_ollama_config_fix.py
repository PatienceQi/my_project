#!/usr/bin/env python3
"""
远程Ollama配置修复验证测试脚本
验证修复后的配置是否正确工作，确保不再尝试连接本地服务
"""

import os
import sys
import logging
import time
import json
from pathlib import Path
from dotenv import load_dotenv

# 设置项目路径
project_root = Path(__file__).parent.absolute()
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

# 加载环境变量
load_dotenv()

# 设置日志
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('ollama_config_test.log', encoding='utf-8')
    ]
)

class OllamaConfigTest:
    """远程Ollama配置测试类"""
    
    def __init__(self):
        self.remote_host = 'http://120.232.79.82:11434'
        self.test_results = {}
        self.logger = logging.getLogger(__name__)
        
        # 强制设置远程配置
        self._force_remote_config()
    
    def _force_remote_config(self):
        """强制设置远程配置"""
        config_vars = {
            'LLM_BINDING_HOST': self.remote_host,
            'OLLAMA_HOST': self.remote_host,
            'OLLAMA_BASE_URL': self.remote_host,
            'OLLAMA_NO_SERVE': '1',
            'OLLAMA_ORIGINS': '*',
            'EMBEDDING_MODEL': 'bge-m3:latest',
            'LLM_MODEL': 'llama3.2:latest'
        }
        
        for key, value in config_vars.items():
            os.environ[key] = value
    
    def run_all_tests(self) -> dict:
        """运行所有测试"""
        print("🧪 开始远程Ollama配置修复验证测试")
        print("=" * 60)
        
        test_suite = [
            ("环境变量配置测试", self.test_environment_config),
            ("配置诊断工具测试", self.test_diagnostics_tool),
            ("EntityExtractor修复测试", self.test_entity_extractor),
            ("GraphRAG引擎修复测试", self.test_graphrag_engine),
            ("错误处理机制测试", self.test_error_handling),
            ("本地连接阻止测试", self.test_local_connection_blocking),
            ("完整工作流测试", self.test_complete_workflow)
        ]\n        \n        total_tests = len(test_suite)\n        passed_tests = 0\n        \n        for i, (test_name, test_func) in enumerate(test_suite, 1):\n            print(f\"\\n🔬 [{i}/{total_tests}] {test_name}\")\n            print(\"-\" * 40)\n            \n            try:\n                result = test_func()\n                self.test_results[test_name] = result\n                \n                if result['success']:\n                    print(f\"   ✅ 通过: {result.get('message', '')}\")\n                    passed_tests += 1\n                else:\n                    print(f\"   ❌ 失败: {result.get('error', '')}\")\n                    \n            except Exception as e:\n                error_result = {\n                    'success': False,\n                    'error': str(e),\n                    'details': f'测试执行异常: {e}'\n                }\n                self.test_results[test_name] = error_result\n                print(f\"   ❌ 异常: {e}\")\n        \n        # 生成测试报告\n        self._generate_test_report(passed_tests, total_tests)\n        \n        return {\n            'total_tests': total_tests,\n            'passed_tests': passed_tests,\n            'success_rate': passed_tests / total_tests * 100,\n            'overall_success': passed_tests == total_tests,\n            'results': self.test_results\n        }\n    \n    def test_environment_config(self) -> dict:\n        """测试环境变量配置"""\n        try:\n            required_configs = {\n                'LLM_BINDING_HOST': self.remote_host,\n                'OLLAMA_HOST': self.remote_host,\n                'OLLAMA_NO_SERVE': '1'\n            }\n            \n            errors = []\n            for key, expected in required_configs.items():\n                current = os.environ.get(key)\n                if current != expected:\n                    errors.append(f\"{key}: {current} != {expected}\")\n            \n            # 检查是否有本地地址配置\n            local_patterns = ['127.0.0.1', 'localhost', ':64482']\n            for pattern in local_patterns:\n                for env_var in ['LLM_BINDING_HOST', 'OLLAMA_HOST']:\n                    value = os.environ.get(env_var, '')\n                    if pattern in value:\n                        errors.append(f\"检测到本地配置: {env_var}={value}\")\n            \n            if errors:\n                return {\n                    'success': False,\n                    'error': f\"配置错误: {'; '.join(errors)}\"\n                }\n            \n            return {\n                'success': True,\n                'message': '所有环境变量配置正确'\n            }\n            \n        except Exception as e:\n            return {\n                'success': False,\n                'error': f'环境配置测试失败: {e}'\n            }\n    \n    def test_diagnostics_tool(self) -> dict:\n        \"\"\"测试配置诊断工具\"\"\"\n        try:\n            from ollama_config_diagnostics import OllamaConfigDiagnostics\n            \n            diagnostics = OllamaConfigDiagnostics()\n            \n            # 运行网络连接测试\n            network_result = diagnostics.check_network_connectivity()\n            if not network_result['success']:\n                return {\n                    'success': False,\n                    'error': f\"网络连接失败: {network_result.get('details', '')}\"}\n            \n            # 运行环境变量检查\n            env_result = diagnostics.check_environment_variables()\n            if not env_result['success']:\n                return {\n                    'success': False,\n                    'error': f\"环境变量检查失败: {'; '.join(env_result.get('issues', []))}\"}\n            \n            return {\n                'success': True,\n                'message': '诊断工具运行正常，配置验证通过'\n            }\n            \n        except Exception as e:\n            return {\n                'success': False,\n                'error': f'诊断工具测试失败: {e}'\n            }\n    \n    def test_entity_extractor(self) -> dict:\n        \"\"\"测试EntityExtractor修复\"\"\"\n        try:\n            from backend.entity_extractor import EntityExtractor\n            \n            # 初始化EntityExtractor\n            extractor = EntityExtractor()\n            \n            # 验证配置\n            if '127.0.0.1' in extractor.ollama_host or 'localhost' in extractor.ollama_host:\n                return {\n                    'success': False,\n                    'error': f'EntityExtractor仍在使用本地地址: {extractor.ollama_host}'\n                }\n            \n            # 验证错误处理客户端\n            if not hasattr(extractor, 'ollama_client'):\n                return {\n                    'success': False,\n                    'error': 'EntityExtractor未集成错误处理客户端'\n                }\n            \n            # 测试简单实体提取\n            test_text = \"华侨试验区管理委员会负责开发建设工作。\"\n            entities = extractor.extract_entities(test_text)\n            \n            return {\n                'success': True,\n                'message': f'EntityExtractor工作正常，提取到{len(entities)}个实体',\n                'details': f'使用主机: {extractor.ollama_host}'\n            }\n            \n        except Exception as e:\n            return {\n                'success': False,\n                'error': f'EntityExtractor测试失败: {e}'\n            }\n    \n    def test_graphrag_engine(self) -> dict:\n        \"\"\"测试GraphRAG引擎修复\"\"\"\n        try:\n            from backend.graphrag_engine import GraphRAGEngine\n            \n            # 初始化GraphRAG引擎\n            engine = GraphRAGEngine()\n            \n            # 验证配置\n            if '127.0.0.1' in engine.ollama_host or 'localhost' in engine.ollama_host:\n                return {\n                    'success': False,\n                    'error': f'GraphRAG引擎仍在使用本地地址: {engine.ollama_host}'\n                }\n            \n            # 验证组件初始化\n            required_components = ['vector_retriever', 'graph_query_engine', 'entity_extractor']\n            for component in required_components:\n                if not hasattr(engine, component) or getattr(engine, component) is None:\n                    return {\n                        'success': False,\n                        'error': f'GraphRAG引擎组件{component}未正确初始化'\n                    }\n            \n            return {\n                'success': True,\n                'message': 'GraphRAG引擎配置正确，所有组件初始化成功',\n                'details': f'使用主机: {engine.ollama_host}'\n            }\n            \n        except Exception as e:\n            return {\n                'success': False,\n                'error': f'GraphRAG引擎测试失败: {e}'\n            }\n    \n    def test_error_handling(self) -> dict:\n        \"\"\"测试错误处理机制\"\"\"\n        try:\n            from backend.ollama_error_handler import (\n                OllamaClientWithFallback, \n                ensure_remote_ollama_config\n            )\n            \n            # 测试配置修正函数\n            updated = ensure_remote_ollama_config()\n            \n            # 测试错误处理客户端\n            client = OllamaClientWithFallback()\n            \n            # 验证当前主机\n            if '127.0.0.1' in client.current_host or 'localhost' in client.current_host:\n                return {\n                    'success': False,\n                    'error': f'错误处理客户端使用本地地址: {client.current_host}'\n                }\n            \n            # 测试健康检查\n            health = client.health_check()\n            \n            return {\n                'success': True,\n                'message': '错误处理机制工作正常',\n                'details': f'当前主机: {client.current_host}'\n            }\n            \n        except Exception as e:\n            return {\n                'success': False,\n                'error': f'错误处理机制测试失败: {e}'\n            }\n    \n    def test_local_connection_blocking(self) -> dict:\n        \"\"\"测试本地连接阻止机制\"\"\"\n        try:\n            # 暂时设置本地地址，看是否会被自动修正\n            original_host = os.environ.get('LLM_BINDING_HOST')\n            \n            # 尝试设置本地地址\n            os.environ['LLM_BINDING_HOST'] = 'http://127.0.0.1:11434'\n            \n            from backend.entity_extractor import EntityExtractor\n            \n            # 初始化，应该自动修正为远程地址\n            extractor = EntityExtractor()\n            \n            # 恢复原始配置\n            if original_host:\n                os.environ['LLM_BINDING_HOST'] = original_host\n            \n            # 验证是否被修正为远程地址\n            if '127.0.0.1' in extractor.ollama_host or 'localhost' in extractor.ollama_host:\n                return {\n                    'success': False,\n                    'error': f'本地连接阻止失败，仍使用: {extractor.ollama_host}'\n                }\n            \n            return {\n                'success': True,\n                'message': '本地连接阻止机制有效',\n                'details': f'自动修正为: {extractor.ollama_host}'\n            }\n            \n        except Exception as e:\n            return {\n                'success': False,\n                'error': f'本地连接阻止测试失败: {e}'\n            }\n    \n    def test_complete_workflow(self) -> dict:\n        \"\"\"测试完整工作流程\"\"\"\n        try:\n            # 首先运行配置诊断\n            from ollama_config_diagnostics import OllamaConfigDiagnostics\n            diagnostics = OllamaConfigDiagnostics()\n            \n            # 验证远程连接\n            network_result = diagnostics.check_network_connectivity()\n            if not network_result['success']:\n                return {\n                    'success': False,\n                    'error': f'远程连接失败: {network_result.get(\"details\", \"\")}'\n                }\n            \n            # 测试实体提取工作流\n            from backend.entity_extractor import EntityExtractor\n            extractor = EntityExtractor()\n            \n            test_text = \"华侨经济文化合作试验区管理委员会负责试验区的开发建设。\"\n            \n            # 提取实体\n            entities = extractor.extract_entities(test_text)\n            \n            # 如果有实体，测试关系提取\n            if entities:\n                relations = extractor.extract_relations(test_text, entities)\n                \n                return {\n                    'success': True,\n                    'message': f'完整工作流测试成功',\n                    'details': f'提取{len(entities)}个实体，{len(relations)}个关系'\n                }\n            else:\n                return {\n                    'success': True,\n                    'message': '完整工作流测试成功（未提取到实体，但流程正常）'\n                }\n            \n        except Exception as e:\n            return {\n                'success': False,\n                'error': f'完整工作流测试失败: {e}'\n            }\n    \n    def _generate_test_report(self, passed: int, total: int):\n        \"\"\"生成测试报告\"\"\"\n        print(\"\\n\" + \"=\" * 60)\n        print(\"📊 测试结果总结\")\n        print(\"=\" * 60)\n        \n        success_rate = passed / total * 100\n        status = \"✅ 成功\" if passed == total else \"⚠️ 部分失败\" if passed > 0 else \"❌ 失败\"\n        \n        print(f\"总体状态: {status}\")\n        print(f\"通过测试: {passed}/{total} ({success_rate:.1f}%)\")\n        \n        # 详细结果\n        print(\"\\n详细结果:\")\n        for test_name, result in self.test_results.items():\n            status_icon = \"✅\" if result['success'] else \"❌\"\n            print(f\"  {status_icon} {test_name}\")\n            if not result['success']:\n                print(f\"     错误: {result.get('error', 'Unknown')}\")\n        \n        # 建议\n        if passed < total:\n            print(\"\\n🔧 修复建议:\")\n            failed_tests = [name for name, result in self.test_results.items() if not result['success']]\n            for test in failed_tests:\n                print(f\"  - 检查{test}的错误信息并修复相关配置\")\n        else:\n            print(\"\\n🎉 所有测试通过！远程Ollama配置修复成功。\")\n        \n        # 保存测试报告到文件\n        report_file = 'ollama_config_test_report.json'\n        with open(report_file, 'w', encoding='utf-8') as f:\n            json.dump({\n                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),\n                'summary': {\n                    'total_tests': total,\n                    'passed_tests': passed,\n                    'success_rate': success_rate,\n                    'overall_success': passed == total\n                },\n                'results': self.test_results\n            }, f, ensure_ascii=False, indent=2)\n        \n        print(f\"\\n📄 详细测试报告已保存到: {report_file}\")\n\n\ndef main():\n    \"\"\"主函数\"\"\"\n    test_runner = OllamaConfigTest()\n    results = test_runner.run_all_tests()\n    \n    return results['overall_success']\n\n\nif __name__ == \"__main__\":\n    success = main()\n    sys.exit(0 if success else 1)